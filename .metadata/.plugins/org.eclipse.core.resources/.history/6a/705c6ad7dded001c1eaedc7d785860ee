/*======================
   WeatherDTO.java
   - DAO 구성
   - XML DOM 활용 → 원격 XML 활용하기
======================*/

package com.test;

import java.net.URL;
import java.util.HashMap;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.xml.sax.InputSource;

public class WeatherDAO
{
	// 공통 멤버 구성 → 멤버 변수 → 초기화 → 생성자
	private Document xmlObj;
	private XPath xPath;
	private HashMap<String, String> map;

	// 생성자 정의 → 기본 생성자
	public WeatherDAO()
	{
		this("108");	// 전국 기준
		/*
		stnId=108	전국
		stnId=109	서울,경기
		stnId=105	강원
		stnId=131	충북
		stnId=133	충남
		stnId=146	전북
		stnId=156	전남
		stnId=143	경북
		stnId=159	경남
		stnId=184	제주특별자치도
		*/
	}
	
	// 생성자 정의 → 매개변수 있는 생성자
	public WeatherDAO(String stnId) throws ParserConfigurationException
	{
		map = new HashMap<String, String>();
		map.put("맑음", "abc.png");
		map.put("흐림", "abc.png");
		map.put("비", "NB03.png");
		map.put("구름조금", "abc.png");
		map.put("구름많음", "abc.png");
		map.put("흐리고 비", "abc.png");
		map.put("구름많고 비", "abc.png");	
		
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();		
		//--DocumentBuilder builder = DocumentBuilderFactory.newInstance.newDocumentBuilder();
		
		String str = String.format
				("http://www.kma.go.kr/weather/forecast/mid-term-rss3.jsp?stnId=%s"
						, stnId);
		URL url = new URL(str);
		InputSource is = new InputSource(url.openStream());
		
		xmlObj = builder.parse(is);
		xPath = XPathFactory.newInstance().newXPath();
		
		//-- XPathFactory xFactory = XPathFactory.newInstance();
		//   xPath = xFactory.newXPath();
		//   와 동일한 구문
		
		/*
		○ XPath 생성
		   - XPathFactory 의 정적 메소드(static) 『newInstance()』 호출을 통해
		     XPath 를 생성해주는 XPathFactory 를 생성하고
		   - 이 XPathFactory 의 정적 메소드 『newXPath()』 호출을 통해
		     XPath 객체를 생성한다.
		
		○ 노드 선택(Selecting Nodes)
		   - 브라우저마다 XPath 를 처리하는 방법이 다르다.
		   - Chrome, Firefox, Edge, Opera, Safari 는
		     『evaluation()』 메소드를 사용하여 노드를 처리한다.
		     → xmlDoc.evaluate(xpath, xmlDoc, null, XPathResult.ANY_TYPE, null)
		   - IE 는 『selectNodes()』 메소드를 사용하여 노드를 선택한다.
		   
		○ XPath 의 『compile(XPath 경로 표현식)』
		   - XML 데이터 Parsing
		     1. XML 이 제공되는 URL 로 접속하여 데이터를 수신한다.
		     2. DocumentBuilderFactory ... newInstance() 로 factory 를 생성한다.
		     3. DocumentBuilder ... newDocumentBuilder() 로 builder 를 생성한다.
		     4. InputSource is ... new InputSource() 로 InputSource 를 생성한다.
		        이 때, 파일로 수신한 경우라면 File 객체를 넘겨준다.
		     5. Document xmlObj = builder.parse(is) 로 XML 을 파싱한다.
		     6. XPath xPath = XPathFactory.newInstance().newXPath() 로
		        XPath 객체를 생성하고
		     7. XPathExpression expr = XPath.compile( XPath 경로 표현식 ) 으로
		        가져올 Element 를 선택한다.
		     8. 해당 노드(Element)에 접근하여 필요한 데이터를 추출한다.     
		     
		*/
	}
	
	public String weatherTitle()
	{
		String result = "";
	}
	
	
}

