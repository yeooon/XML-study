/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.54
 * Generated at: 2022-06-17 02:46:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.test.WeatherDTO;
import java.util.ArrayList;
import com.test.WeatherDAO;

public final class WeatherInfo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/standard.jar", Long.valueOf(1655432489060L));
    _jspx_dependants.put("jar:file:/C:/XmlStudy/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/XmlApp08/WEB-INF/lib/standard.jar!/META-INF/c.tld", Long.valueOf(1098678690000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.test.WeatherDAO");
    _jspx_imports_classes.add("com.test.WeatherDTO");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("UTF-8");
	String cp = request.getContextPath();

      out.write('\r');
      out.write('\n');

	// 사용자가 선택한 지역 데이터 수신
	String stnId = request.getParameter("stnId");
	if(stnId==null)
	{
		stnId = "108";		// 전국 날씨 정보
	}
	
	StringBuilder sb = new StringBuilder();
	WeatherDAO dao = new WeatherDAO(stnId);
	
	// 타이틀
	String title = dao.weatherTitle();
	
	// 육상 중기 예보
	String weatherInfo = dao.weatherInfo();
	
	// 도시 정보 및 날짜 시간별 날씨 정보
	ArrayList<String> cityList = dao.weatherCityList();
	for(int i=0; i<cityList.size(); i++)
	{
		sb.append(String.format("<h3>%s</h3>", cityList.get(i)));
		
		ArrayList<WeatherDTO> weatherList = dao.weatherList(String.valueOf(i+1));
		
		// 테이블 동적 생성
		sb.append("<table class='table'>");
		sb.append("<tr>");
		sb.append("<th>날짜</th>");
		sb.append("<th>날씨</th>");
		sb.append("<th>최저/최고 기온</th>");
		sb.append("<th>강수확률</th>");
		sb.append("</tr>");
		
		for(WeatherDTO w : weatherList)
		{
			sb.append("<tr>");
			sb.append(String.format("<td>%s</td>", w.getTmEf()));
			sb.append(String.format("<td><img src='images/%s'> %s</td>"
										, w.getImg(), w.getWf()));
			sb.append(String.format("<td>%s℃ / %s℃</td>"
										, w.getTmn(), w.getTmx()));
			sb.append(String.format("<td>%s%%</td>", w.getRnSt()));
			sb.append("</tr>");
		}
		
		sb.append("</table>");
		
	}
	
	

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/main.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css\">\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t$(document).ready(function()\r\n");
      out.write("\t{\r\n");
      out.write("\t\t//alert(\"호출 확인\");\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 선택한 라디오 상태를 선택된 상태(checked)로 표시(유지)할 수 있도록 처리\r\n");
      out.write("\t\t//$(\":radio:eq(0)\").attr(\"checked\", \"checked\");\r\n");
      out.write("\t\t//                   :\r\n");
      out.write("\t\t//$(\":radio:eq(2)\").attr(\"checked\", \"checked\");\r\n");
      out.write("\t\t//                   :\r\n");
      out.write("\t\t//$(\":radio:eq(9)\").attr(\"checked\", \"checked\");\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//$(\":radio[value='108']\").attr(\"checked\", \"checked\");\r\n");
      out.write("\t\t//                   :\r\n");
      out.write("\t\t//$(\":radio[value='133']\").attr(\"checked\", \"checked\");\r\n");
      out.write("\t\t//                   :\r\n");
      out.write("\t\t//$(\":radio[value='184']\").attr(\"checked\", \"checked\");\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\":radio[value='");
      out.print(stnId);
      out.write("']\").attr(\"checked\", \"checked\");\r\n");
      out.write("\t\t\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("108\t전국     \r\n");
      out.write("109\t서울,경기  \r\n");
      out.write("105\t강원     \r\n");
      out.write("131\t충북     \r\n");
      out.write("133\t충남     \r\n");
      out.write("146\t전북     \r\n");
      out.write("156\t전남     \r\n");
      out.write("143\t경북     \r\n");
      out.write("159\t경남     \r\n");
      out.write("184\t제주특별자치도\r\n");
      out.write("-->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("\r\n");
      out.write("\t<h2>\r\n");
      out.write("\t\t기상 정보 <small>Bootstrap</small>\r\n");
      out.write("\t</h2>\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"panel-group\" role=\"group\">\r\n");
      out.write("\t\r\n");
      out.write("\t\t<div class=\"panel panel-default\" role=\"group\">\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\t<div class=\"panel-heading\">지역 선택</div>\r\n");
      out.write("\t\t\t<div class=\"panel-body\">\r\n");
      out.write("\t\t\t\t<form method=\"post\" role=\"form\">\r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" name=\"stnId\" value=\"108\" checked=\"checked\"> 전국\r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" name=\"stnId\" value=\"109\"> 서울, 경기\r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" name=\"stnId\" value=\"105\"> 강원         \r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" name=\"stnId\" value=\"131\"> 충북         \r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" name=\"stnId\" value=\"133\"> 충남         \r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" name=\"stnId\" value=\"146\"> 전북         \r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" name=\"stnId\" value=\"156\"> 전남         \r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" name=\"stnId\" value=\"143\"> 경북         \r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" name=\"stnId\" value=\"159\"> 경남         \r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" name=\"stnId\" value=\"184\"> 제주특별자치도    \r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<button type=\"submit\" class=\"btn btn-default\">Submit</button>\r\n");
      out.write("\t\t\t\t</form>\r\n");
      out.write("\t\t\t</div><!-- close .panel-body -->\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t</div><!-- close .panel .panel-default -->\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<div class=\"panel panel-default\" role=\"group\">\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\t<div class=\"panel-heading\">기상 정보 출력</div>\r\n");
      out.write("\t\t\t<div class=\"panel-body\">\r\n");
      out.write("\t\t\t\t<p>\r\n");
      out.write("\t\t\t\t\t<b>서울,경기도 육상 중기예보 - 2021년 12월 27일 (월)요일 06:00 발표</b>\r\n");
      out.write("\t\t\t\t</p>\r\n");
      out.write("\t\t\t\t<p>\r\n");
      out.write("\t\t\t\t\t○ (강수) 1월 2일(일) 오전에는 눈이 내리겠습니다.<br />\r\n");
      out.write("\t\t\t\t\t○ (기온) 아침 기온은 -14~-2도, 낮 기온은 -5~4도로 어제(26일, 아침최저기온 -19~-13도, 낮최고기온 -8~-5도)보다 높겠습니다.<br />\r\n");
      out.write("\t\t\t\t\t 특히, 12월 31일(금)~1월 1일(토)은 평년(아침 기온 -11~-4)보다 4~5도 가량 낮고 바람도 강하게 불어 매우 춥겠습니다.<br />\r\n");
      out.write("\t\t\t\t\t○ (해상) 서해중부해상의 물결은 30일(목) 오후~31일(금) 오전은 1.0~3.0m로 높게 일겠고, 바람이 매우 강하게 불겠습니다. 그 밖의 날은 1.0~2.5m로 일겠습니다.<br />\r\n");
      out.write("\t\t\t\t\t○ (주말전망) 1월 1일(토)은 구름많겠고, 2일은 오전에 구름많고 눈이 내리다가 오후에는 맑아지겠습니다. 아침최저기온은 -14~-8도, 낮최고기온은 -1~3도의 분포를 보이겠습니다.\r\n");
      out.write("\t\t\t\t</p>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t<!-- \r\n");
      out.write("\t\t\t\t<table class=\"table\">\r\n");
      out.write("\t\t\t\t\t<thead>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>날짜</th>\r\n");
      out.write("\t\t\t\t\t\t<th>날씨</th>\r\n");
      out.write("\t\t\t\t\t\t<th>최저/최고 기온</th>\r\n");
      out.write("\t\t\t\t\t\t<th>강수확률</th>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t</thead>\r\n");
      out.write("\t\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>2021-12-30 00:00</td>\r\n");
      out.write("\t\t\t\t\t\t<td>맑음</td>\r\n");
      out.write("\t\t\t\t\t\t<td>-7 ~ -2</td>\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<td>0</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>2021-12-30 01:00</td>\r\n");
      out.write("\t\t\t\t\t\t<td>맑음</td>\r\n");
      out.write("\t\t\t\t\t\t<td>-7 ~ -2</td>\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<td>0</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>2021-12-30 02:00</td>\r\n");
      out.write("\t\t\t\t\t\t<td>맑음</td>\r\n");
      out.write("\t\t\t\t\t\t<td>-7 ~ -2</td>\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<td>0</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t</tbody>\r\n");
      out.write("\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t<h3>인천</h3>\r\n");
      out.write("\t\t\t\t<table class=\"table\">\r\n");
      out.write("\t\t\t\t\t<thead>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th>날짜</th>\r\n");
      out.write("\t\t\t\t\t\t<th>날씨</th>\r\n");
      out.write("\t\t\t\t\t\t<th>최저/최고 기온</th>\r\n");
      out.write("\t\t\t\t\t\t<th>강수확률</th>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t</thead>\r\n");
      out.write("\t\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>2021-12-30 00:00</td>\r\n");
      out.write("\t\t\t\t\t\t<td>맑음</td>\r\n");
      out.write("\t\t\t\t\t\t<td>-7 ~ -2</td>\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<td>0</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>2021-12-30 01:00</td>\r\n");
      out.write("\t\t\t\t\t\t<td>맑음</td>\r\n");
      out.write("\t\t\t\t\t\t<td>-7 ~ -2</td>\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<td>0</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>2021-12-30 02:00</td>\r\n");
      out.write("\t\t\t\t\t\t<td>맑음</td>\r\n");
      out.write("\t\t\t\t\t\t<td>-7 ~ -2</td>\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<td>0</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t</tbody>\r\n");
      out.write("\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t-->\r\n");
      out.write("\t\t\t\t");
      out.print(sb.toString() );
      out.write("\r\n");
      out.write("\t\t\t</div><!-- close .panel-body -->\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t</div><!-- close .panel .panel-default -->\r\n");
      out.write("\t\r\n");
      out.write("\t</div><!-- close .panel-group -->\r\n");
      out.write("\t\r\n");
      out.write("</div><!-- close .container -->");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
